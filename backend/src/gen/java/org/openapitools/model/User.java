/*
 * HealthConnect+ HealthConnect+
 *
 * The version of the OpenAPI document: 1.0.0 Contact: abc@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import at.favre.lib.crypto.bcrypt.BCrypt;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import org.bson.Document;

/**
 * User
 */
@JsonPropertyOrder({User.JSON_PROPERTY_ADDRESS, User.JSON_PROPERTY_EMAIL, User.JSON_PROPERTY_GENDER,
    User.JSON_PROPERTY_PASSWORD, User.JSON_PROPERTY_PHONE, User.JSON_PROPERTY_NAME})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen",
    date = "2023-08-25T10:57:20.735818+05:30[Asia/Kolkata]")
public class User {
  public static final String JSON_PROPERTY_ADDRESS = "address";
  @JsonProperty(JSON_PROPERTY_ADDRESS)
  private String address;

  public static final String JSON_PROPERTY_EMAIL = "email";
  @JsonProperty(JSON_PROPERTY_EMAIL)
  private String email;

  /**
   * Gets or Sets gender
   */
  public enum GenderEnum {
    MALE("male"),

    FEMALE("female"),

    OTHER("other");

    private String value;

    GenderEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static GenderEnum fromValue(String value) {
      for (GenderEnum b : GenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_GENDER = "gender";
  @JsonProperty(JSON_PROPERTY_GENDER)
  private GenderEnum gender;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  private String password;

  public static final String JSON_PROPERTY_PHONE = "phone";
  @JsonProperty(JSON_PROPERTY_PHONE)
  private String phone;

  public static final String JSON_PROPERTY_NAME = "name";
  @JsonProperty(JSON_PROPERTY_NAME)
  private String name;

  public User address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * 
   * @return address
   **/
  @JsonProperty(value = "address")
  @ApiModelProperty(value = "")

  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public User email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * 
   * @return email
   **/
  @JsonProperty(value = "email")
  @ApiModelProperty(example = "john@email.com", required = true, value = "")
  @NotNull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public User gender(GenderEnum gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * 
   * @return gender
   **/
  @JsonProperty(value = "gender")
  @ApiModelProperty(value = "")

  public GenderEnum getGender() {
    return gender;
  }

  public void setGender(GenderEnum gender) {
    this.gender = gender;
  }

  public User password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * 
   * @return password
   **/
  @JsonProperty(value = "password")
  @ApiModelProperty(example = "12345", required = true, value = "")
  @NotNull
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public User phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Get phone
   * 
   * @return phone
   **/
  @JsonProperty(value = "phone")
  @ApiModelProperty(example = "12345", required = true, value = "")
  @NotNull
  @Size(min = 10, max = 10)
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }

  public User name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * 
   * @return name
   **/
  @JsonProperty(value = "name")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.address, user.address) && Objects.equals(this.email, user.email)
        && Objects.equals(this.gender, user.gender) && Objects.equals(this.password, user.password)
        && Objects.equals(this.phone, user.phone) && Objects.equals(this.name, user.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, email, gender, password, phone, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");

    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public boolean isValid() {
    if (this.email == null || this.password == null || this.phone == null || this.name == null) {
      return false;
    }
    return true;
  }

  public Document toDocument() {
    String encryptedPassword =
        BCrypt.withDefaults().hashToString(12, this.getPassword().toCharArray());
    return new Document(JSON_PROPERTY_ADDRESS,
        this.getAddress() != null ? this.getAddress().toString() : "")
            .append(JSON_PROPERTY_EMAIL, this.getEmail().toString())
            .append(JSON_PROPERTY_GENDER,
                this.getGender() != null ? this.getGender().toString() : "")
            .append(JSON_PROPERTY_PASSWORD, encryptedPassword.toString())
            .append(JSON_PROPERTY_PHONE, this.getPhone().toString())
            .append(JSON_PROPERTY_NAME, this.getName().toString());
  }
}

