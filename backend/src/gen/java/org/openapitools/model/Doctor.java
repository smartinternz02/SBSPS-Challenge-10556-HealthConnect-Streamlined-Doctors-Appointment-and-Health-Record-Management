/*
 * HealthConnect+ HealthConnect+
 *
 * The version of the OpenAPI document: 1.0.0 Contact: abc@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import at.favre.lib.crypto.bcrypt.BCrypt;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import org.bson.Document;

/**
 * Doctor
 */
@JsonPropertyOrder({Doctor.JSON_PROPERTY_EXPERIENCE, Doctor.JSON_PROPERTY_CONSULTATION_FEES,
    Doctor.JSON_PROPERTY_CONTACT_NUMBER, Doctor.JSON_PROPERTY_EMAIL, Doctor.JSON_PROPERTY_GENDER,
    Doctor.JSON_PROPERTY_PASSWORD, Doctor.JSON_PROPERTY_SPECIALITY})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen",
    date = "2023-08-29T22:23:28.514119+05:30[Asia/Kolkata]")
public class Doctor {
  public static final String JSON_PROPERTY_EXPERIENCE = "experience";
  @JsonProperty(JSON_PROPERTY_EXPERIENCE)
  private Integer experience;

  public static final String JSON_PROPERTY_CONSULTATION_FEES = "consultation_fees";
  @JsonProperty(JSON_PROPERTY_CONSULTATION_FEES)
  private Integer consultationFees;

  public static final String JSON_PROPERTY_CONTACT_NUMBER = "contact_number";
  @JsonProperty(JSON_PROPERTY_CONTACT_NUMBER)
  private String contactNumber;

  public static final String JSON_PROPERTY_EMAIL = "email";
  @JsonProperty(JSON_PROPERTY_EMAIL)
  private String email;

  /**
   * Gets or Sets gender
   */
  public enum GenderEnum {
    MALE("male"),

    FEMALE("female"),

    OTHER("other");

    private String value;

    GenderEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static GenderEnum fromValue(String value) {
      for (GenderEnum b : GenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_GENDER = "gender";
  @JsonProperty(JSON_PROPERTY_GENDER)
  private GenderEnum gender;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  private String password;

  /**
   * Gets or Sets speciality
   */
  public enum SpecialityEnum {
    NEUROLOGIST("Neurologist"),

    CARDIOLOGIST("Cardiologist"),

    GYNACOLOGIST("Gynacologist"),

    SURGEON("Surgeon"),

    PHYSICIAN("Physician"),

    PSYCHIATRIST("Psychiatrist"),

    UROLOGIST("Urologist"),

    NEPHROLOGIST("Nephrologist"),

    PEDIATRICIAN("Pediatrician"),

    DERMATOLOGIST("Dermatologist"),

    ANASTHESIOLOGIST("Anasthesiologist"),

    ONCOLOGIST("Oncologist"),

    GASTROENTERLOGIST("Gastroenterlogist"),

    ENDOCRINOLOGIST("Endocrinologist"),

    OPTOMOLOGIST("Optomologist"),

    ORTHOLOGIST("Orthologist"),

    ENT_SPECIALIST("ENT Specialist"),

    ORTHOPAEDIST("Orthopaedist"),

    PULMONOLOGIST("Pulmonologist"),

    PODIATRISTS("Podiatrists");

    private String value;

    SpecialityEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SpecialityEnum fromValue(String value) {
      for (SpecialityEnum b : SpecialityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SPECIALITY = "speciality";
  @JsonProperty(JSON_PROPERTY_SPECIALITY)
  private SpecialityEnum speciality;

  public Doctor experience(Integer experience) {
    this.experience = experience;
    return this;
  }

  /**
   * Get experience
   * 
   * @return experience
   **/
  @JsonProperty(value = "experience")
  @ApiModelProperty(example = "9", value = "")

  public Integer getExperience() {
    return experience;
  }

  public void setExperience(Integer experience) {
    this.experience = experience;
  }

  public Doctor consultationFees(Integer consultationFees) {
    this.consultationFees = consultationFees;
    return this;
  }

  /**
   * Get consultationFees
   * 
   * @return consultationFees
   **/
  @JsonProperty(value = "consultation_fees")
  @ApiModelProperty(example = "234", required = true, value = "")
  @NotNull
  public Integer getConsultationFees() {
    return consultationFees;
  }

  public void setConsultationFees(Integer consultationFees) {
    this.consultationFees = consultationFees;
  }

  public Doctor contactNumber(String contactNumber) {
    this.contactNumber = contactNumber;
    return this;
  }

  /**
   * Get contactNumber
   * 
   * @return contactNumber
   **/
  @JsonProperty(value = "contact_number")
  @ApiModelProperty(example = "9192947354", required = true, value = "")
  @NotNull
  @Size(min = 10, max = 10)
  public String getContactNumber() {
    return contactNumber;
  }

  public void setContactNumber(String contactNumber) {
    this.contactNumber = contactNumber;
  }

  public Doctor email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * 
   * @return email
   **/
  @JsonProperty(value = "email")
  @ApiModelProperty(example = "john@email.com", required = true, value = "")
  @NotNull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public Doctor gender(GenderEnum gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * 
   * @return gender
   **/
  @JsonProperty(value = "gender")
  @ApiModelProperty(value = "")

  public GenderEnum getGender() {
    return gender;
  }

  public void setGender(GenderEnum gender) {
    this.gender = gender;
  }

  public Doctor password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * 
   * @return password
   **/
  @JsonProperty(value = "password")
  @ApiModelProperty(example = "12345", required = true, value = "")
  @NotNull
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public Doctor speciality(SpecialityEnum speciality) {
    this.speciality = speciality;
    return this;
  }

  /**
   * Get speciality
   * 
   * @return speciality
   **/
  @JsonProperty(value = "speciality")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public SpecialityEnum getSpeciality() {
    return speciality;
  }

  public void setSpeciality(SpecialityEnum speciality) {
    this.speciality = speciality;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Doctor doctor = (Doctor) o;
    return Objects.equals(experience, doctor.experience)
        && Objects.equals(consultationFees, doctor.consultationFees)
        && Objects.equals(contactNumber, doctor.contactNumber)
        && Objects.equals(email, doctor.email) && Objects.equals(gender, doctor.gender)
        && Objects.equals(password, doctor.password)
        && Objects.equals(speciality, doctor.speciality);
  }

  @Override
  public int hashCode() {
    return Objects.hash(experience, consultationFees, contactNumber, email, gender, password,
        speciality);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Doctor {\n");

    sb.append("    experience: ").append(toIndentedString(experience)).append("\n");
    sb.append("    consultationFees: ").append(toIndentedString(consultationFees)).append("\n");
    sb.append("    contactNumber: ").append(toIndentedString(contactNumber)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    speciality: ").append(toIndentedString(speciality)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public boolean isValid() {
    if (this.consultationFees == null || this.contactNumber == null || this.email == null
        || this.password == null || this.speciality == null) {
      return false;
    }
    if (this.getContactNumber().length() != 10) {
      return false;
    }
    return true;
  }

  public Document toDocument() {
    String encryptedPassword =
        BCrypt.withDefaults().hashToString(12, this.getPassword().toCharArray());
    return new Document(JSON_PROPERTY_EXPERIENCE,
        this.getExperience() != null ? this.getExperience().toString() : "")
            .append(JSON_PROPERTY_CONTACT_NUMBER, this.getContactNumber().toString())
            .append(JSON_PROPERTY_CONSULTATION_FEES, this.getConsultationFees().toString())
            .append(JSON_PROPERTY_EMAIL, this.getEmail().toString())
            .append(JSON_PROPERTY_GENDER,
                this.getGender() != null ? this.getGender().toString() : "")
            .append(JSON_PROPERTY_PASSWORD, encryptedPassword.toString())
            .append(JSON_PROPERTY_SPECIALITY, this.getSpeciality().toString());
  }
}
