/*
 * HealthConnect+ HealthConnect+
 *
 * The version of the OpenAPI document: 1.0.0 Contact: abc@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */


package org.openapitools.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import org.bson.Document;

/**
 * OrderDetails
 */
@JsonPropertyOrder({OrderDetails.JSON_PROPERTY_ORDER_ID, OrderDetails.JSON_PROPERTY_USER_EMAIL,
    OrderDetails.JSON_PROPERTY_ITEMS, OrderDetails.JSON_PROPERTY_TYPE,
    OrderDetails.JSON_PROPERTY_DATE, OrderDetails.JSON_PROPERTY_PRICE})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen",
    date = "2023-08-31T13:30:54.533812+05:30[Asia/Kolkata]")
public class OrderDetails {
  public static final String JSON_PROPERTY_ORDER_ID = "order_id";
  @JsonProperty(JSON_PROPERTY_ORDER_ID)
  private String orderId;

  public static final String JSON_PROPERTY_USER_EMAIL = "user_email";
  @JsonProperty(JSON_PROPERTY_USER_EMAIL)
  private String userEmail;

  public static final String JSON_PROPERTY_ITEMS = "items";
  @JsonProperty(JSON_PROPERTY_ITEMS)
  private List<String> items = new ArrayList<>();

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    APPOINTMENT("Appointment"),

    MEDICINE("Medicine");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  @JsonProperty(JSON_PROPERTY_TYPE)
  private TypeEnum type;

  public static final String JSON_PROPERTY_DATE = "date";
  @JsonProperty(JSON_PROPERTY_DATE)
  private String date;

  public static final String JSON_PROPERTY_PRICE = "price";
  @JsonProperty(JSON_PROPERTY_PRICE)
  private String price;

  public OrderDetails orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Get orderId
   * 
   * @return orderId
   **/
  @JsonProperty(value = "order_id")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }

  public OrderDetails userEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

  /**
   * Get userEmail
   * 
   * @return userEmail
   **/
  @JsonProperty(value = "user_email")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public String getUserEmail() {
    return userEmail;
  }

  public void setUserEmail(String userEmail) {
    this.userEmail = userEmail;
  }

  public OrderDetails items(List<String> items) {
    this.items = items;
    return this;
  }

  public OrderDetails addItemsItem(String itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Get items
   * 
   * @return items
   **/
  @JsonProperty(value = "items")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public List<String> getItems() {
    return items;
  }

  public void setItems(List<String> items) {
    this.items = items;
  }

  public OrderDetails type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * 
   * @return type
   **/
  @JsonProperty(value = "type")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public OrderDetails date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * 
   * @return date
   **/
  @JsonProperty(value = "date")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }

  public OrderDetails price(String price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * 
   * @return price
   **/
  @JsonProperty(value = "price")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public String getPrice() {
    return price;
  }

  public void setPrice(String price) {
    this.price = price;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderDetails orderDetails = (OrderDetails) o;
    return Objects.equals(orderId, orderDetails.orderId)
        && Objects.equals(userEmail, orderDetails.userEmail)
        && Objects.equals(items, orderDetails.items) && Objects.equals(type, orderDetails.type)
        && Objects.equals(date, orderDetails.date) && Objects.equals(price, orderDetails.price);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderId, userEmail, items, type, date, price);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderDetails {\n");

    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public boolean isValid() {
    if (this.date == null || this.items == null || this.orderId == null || this.price == null
        || this.type == null || this.userEmail == null) {
      return false;
    }
    return true;
  }

  public Document toDocument() {
    Object[] itemsArr = this.getItems().toArray();
    ArrayList<String> items = new ArrayList<String>();
    for (Object item: itemsArr) {
      items.add(item.toString());
    }
    return new Document(JSON_PROPERTY_ORDER_ID, this.getOrderId().toString())
        .append(JSON_PROPERTY_USER_EMAIL, this.getUserEmail().toString())
        .append(JSON_PROPERTY_ITEMS, items)
        .append(JSON_PROPERTY_TYPE, this.getType().toString())
        .append(JSON_PROPERTY_DATE, this.getDate().toString())
        .append(JSON_PROPERTY_PRICE, this.getPrice().toString());
  }
}

